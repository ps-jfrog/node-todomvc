{"_id":"@dual-bundle/import-meta-resolve","_rev":"1-b71dd99fd783832b0f1ceb9f2036355b","name":"@dual-bundle/import-meta-resolve","dist-tags":{"latest":"4.1.0"},"versions":{"4.0.0":{"name":"@dual-bundle/import-meta-resolve","version":"4.0.0","description":"A fork of `import-meta-resolve` with commonjs + ESM support at the same time, AKA dual package.","license":"MIT","keywords":["resolve","node","esm","module","import","import-meta-resolve"],"repository":{"type":"git","url":"git+https://github.com/un-es/import-meta-resolve.git"},"bugs":{"url":"https://github.com/wooorm/import-meta-resolve/issues"},"funding":{"type":"github","url":"https://github.com/sponsors/wooorm"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"maintainers":[{"name":"jounqin","email":"admin@1stg.me"}],"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.cjs","module":"index.js","types":"index.d.ts","exports":{"types":"./index.d.ts","require":"./index.cjs","default":"./index.js"},"devDependencies":{"@types/node":"^20.0.0","@types/semver":"^7.0.0","c8":"^8.0.0","esbuild":"^0.20.1","prettier":"^3.0.0","remark-cli":"^11.0.0","remark-preset-wooorm":"^9.0.0","semver":"^7.0.0","type-coverage":"^2.0.0","typescript":"^5.0.0","xo":"^0.56.0"},"scripts":{"prepack":"npm run generate && npm run build && npm run format","generate":"node --conditions development script.js","build":"tsc --build --clean && tsc --build && type-coverage && esbuild --bundle --outfile=index.cjs --platform=node --format=cjs index.js","format":"remark . -qfo && prettier . -w --log-level warn && xo --fix","test-api":"node --experimental-import-meta-resolve test/baseline.js && node --experimental-import-meta-resolve test/baseline-async.js && node test/index.js","test-coverage":"c8 --check-coverage --branches 75 --functions 75 --lines 75 --statements 75 --reporter lcov npm run test-api","test":"npm run generate && npm run build && npm run format && npm run test-coverage"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"prettier":true,"rules":{"complexity":"off","max-depth":"off","max-params":"off","no-constant-condition":"off","no-new":"off","prefer-arrow-callback":"off","unicorn/prefer-at":"off","unicorn/prefer-string-replace-all":"off"},"ignore":["test/node_modules/"]},"remarkConfig":{"plugins":["preset-wooorm",["remark-lint-maximum-heading-length",false],["remark-lint-no-multiple-toplevel-headings",false]]},"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true,"ignoreFiles":["lib/errors.d.ts"]},"_id":"@dual-bundle/import-meta-resolve@4.0.0","gitHead":"8461ec387cb8283265d0e378986d00da504bd657","homepage":"https://github.com/un-es/import-meta-resolve#readme","_nodeVersion":"20.11.1","_npmVersion":"10.2.4","dist":{"integrity":"sha512-ZKXyJeFAzcpKM2kk8ipoGIPUqx9BX52omTGnfwjJvxOCaZTM2wtDK7zN0aIgPRbT9XYAlha0HtmZ+XKteuh0Gw==","shasum":"df79b7ea62c55094dc129880387864cdf41eca7c","tarball":"https://registry.npmjs.org/@dual-bundle/import-meta-resolve/-/import-meta-resolve-4.0.0.tgz","fileCount":20,"unpackedSize":124719,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTb+Y2WujzOUhXQTvhecBd2M7b9KzdpZCUKgw0lJhsSwIhAOLawlsIA+Rfeod1kr+zORUp3OfkZ/eNdHA46qF0R93Y"}]},"_npmUser":{"name":"jounqin","email":"admin@1stg.me"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/import-meta-resolve_4.0.0_1709128757181_0.5384992613692932"},"_hasShrinkwrap":false},"4.1.0":{"name":"@dual-bundle/import-meta-resolve","version":"4.1.0","description":"A fork of `import-meta-resolve` with commonjs + ESM support at the same time, AKA dual package.","license":"MIT","keywords":["resolve","node","esm","module","import","import-meta-resolve"],"repository":{"type":"git","url":"git+https://github.com/un-es/import-meta-resolve.git"},"bugs":{"url":"https://github.com/wooorm/import-meta-resolve/issues"},"funding":{"type":"github","url":"https://github.com/sponsors/wooorm"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"maintainers":[{"name":"jounqin","email":"admin@1stg.me"}],"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.cjs","module":"index.js","types":"index.d.ts","exports":{"types":"./index.d.ts","require":"./index.cjs","default":"./index.js"},"devDependencies":{"@types/node":"^20.0.0","@types/semver":"^7.0.0","c8":"^9.0.0","esbuild":"^0.21.1","f-ck":"^2.0.0","prettier":"^3.0.0","remark-cli":"^12.0.0","remark-preset-wooorm":"^10.0.0","semver":"^7.0.0","type-coverage":"^2.0.0","typescript":"^5.0.0","xo":"^0.58.0"},"scripts":{"prepack":"npm run generate && npm run build && npm run format","generate":"node --conditions development script.js","build":"tsc --build --clean && tsc --build && type-coverage && esbuild --bundle --outfile=index.cjs --platform=node --format=cjs index.js","format":"remark . -qfo && prettier . -w --log-level warn && xo --fix","test-api":"node --experimental-import-meta-resolve test/baseline.js && node --experimental-import-meta-resolve test/baseline-async.js && node test/index.js","test-coverage":"c8 --check-coverage --branches 75 --functions 75 --lines 75 --statements 75 --reporter lcov npm run test-api","test":"npm run generate && npm run build && npm run format && npm run test-coverage"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"prettier":true,"rules":{"complexity":"off","max-depth":"off","max-params":"off","no-constant-condition":"off","no-new":"off","prefer-arrow-callback":"off","unicorn/prefer-at":"off","unicorn/prefer-string-replace-all":"off"},"ignore":["test/node_modules/"]},"remarkConfig":{"plugins":["preset-wooorm",["remark-lint-maximum-heading-length",false],["remark-lint-no-multiple-toplevel-headings",false]]},"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true,"ignoreFiles":["lib/errors.d.ts"]},"_id":"@dual-bundle/import-meta-resolve@4.1.0","gitHead":"3962469a82ff8a88a76bb92ab123e176bc6b6547","homepage":"https://github.com/un-es/import-meta-resolve#readme","_nodeVersion":"20.12.2","_npmVersion":"10.5.0","dist":{"integrity":"sha512-+nxncfwHM5SgAtrVzgpzJOI1ol0PkumhVo469KCf9lUi21IGcY90G98VuHm9VRrUypmAzawAHO9bs6hqeADaVg==","shasum":"519c1549b0e147759e7825701ecffd25e5819f7b","tarball":"https://registry.npmjs.org/@dual-bundle/import-meta-resolve/-/import-meta-resolve-4.1.0.tgz","fileCount":16,"unpackedSize":125577,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDRc5s3uGOoxiodnyrWcRHbbelXQGfjkPKhKdeCXJoLCAiEAhxGXpDXSKQpIeXaRGRM1DpOHyr6pfB68zHpbZXR53es="}]},"_npmUser":{"name":"jounqin","email":"admin@1stg.me"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/import-meta-resolve_4.1.0_1715233076843_0.7907170656210967"},"_hasShrinkwrap":false}},"time":{"created":"2024-02-28T13:59:17.069Z","4.0.0":"2024-02-28T13:59:17.321Z","modified":"2024-05-09T05:37:57.186Z","4.1.0":"2024-05-09T05:37:56.988Z"},"maintainers":[{"name":"jounqin","email":"admin@1stg.me"}],"description":"A fork of `import-meta-resolve` with commonjs + ESM support at the same time, AKA dual package.","homepage":"https://github.com/un-es/import-meta-resolve#readme","keywords":["resolve","node","esm","module","import","import-meta-resolve"],"repository":{"type":"git","url":"git+https://github.com/un-es/import-meta-resolve.git"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"bugs":{"url":"https://github.com/wooorm/import-meta-resolve/issues"},"license":"MIT","readme":"# `@dual-bundle/import-meta-resolve`\n\nA fork of [`import-meta-resolve`](https://github.com/wooorm/import-meta-resolve)\nwith commonjs + ESM support at the same time, AKA dual package.\n\nIt will rebase and try to release in order to sync with the upstream every day,\nsee [.github/workflows/rebase.yml](.github/workflows/rebase.yml) for details.\n\n## Installation\n\n```bash\n# npm\nnpm install @dual-bundle/import-meta-resolve\n\n# yarn\nyarn add @dual-bundle/import-meta-resolve\n```\n\n***\n\n# import-meta-resolve\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n\nResolve things like Node.js.\n\n## Contents\n\n* [What is this?](#what-is-this)\n* [When to use this?](#when-to-use-this)\n* [Install](#install)\n* [Use](#use)\n* [API](#api)\n  * [`resolve(specifier, parent)`](#resolvespecifier-parent)\n  * [`moduleResolve(specifier, parent, conditions, preserveSymlinks)`](#moduleresolvespecifier-parent-conditions-preservesymlinks)\n  * [`ErrnoException`](#errnoexception)\n* [Algorithm](#algorithm)\n* [Differences to Node](#differences-to-node)\n* [Types](#types)\n* [Compatibility](#compatibility)\n* [Contribute](#contribute)\n* [License](#license)\n\n## What is this?\n\nThis package is a ponyfill for [`import.meta.resolve`][native-resolve].\nIt supports everything you need to resolve files just like modern Node does:\nimport maps, export maps, loading CJS and ESM projects, all of that!\n\n## When to use this?\n\nAs of Node.js 20.0, `import.meta.resolve` is still behind an experimental flag.\nThis package can be used to do what it does in Node 16–20.\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 16+), install with [npm][]:\n\n```sh\nnpm install import-meta-resolve\n```\n\n## Use\n\n```js\nimport {resolve} from 'import-meta-resolve'\n\n// A file:\nconsole.log(resolve('./index.js', import.meta.url))\n//=> file:///Users/tilde/Projects/oss/import-meta-resolve/index.js\n\n// A CJS package:\nconsole.log(resolve('builtins', import.meta.url))\n//=> file:///Users/tilde/Projects/oss/import-meta-resolve/node_modules/builtins/index.js\n\n// A scoped CJS package:\nconsole.log(resolve('@eslint/eslintrc', import.meta.url))\n//=> file:///Users/tilde/Projects/oss/import-meta-resolve/node_modules/@eslint/eslintrc/lib/index.js\n\n// A package with an export map:\nconsole.log(resolve('micromark/lib/parse', import.meta.url))\n//=> file:///Users/tilde/Projects/oss/import-meta-resolve/node_modules/micromark/lib/parse.js\n\n// A node builtin:\nconsole.log(resolve('fs', import.meta.url))\n//=> node:fs\n```\n\n## API\n\nThis package exports the identifiers [`moduleResolve`][moduleresolve] and\n[`resolve`][resolve].\nThere is no default export.\n\n### `resolve(specifier, parent)`\n\nMatch `import.meta.resolve` except that `parent` is required (you can pass\n`import.meta.url`).\n\n###### Parameters\n\n* `specifier` (`string`)\n  — the module specifier to resolve relative to parent\n  (`/example.js`, `./example.js`, `../example.js`, `some-package`, `fs`, etc)\n* `parent` (`string`, example: `import.meta.url`)\n  — the absolute parent module URL to resolve from; you must pass\n  `import.meta.url` or something else\n\n###### Returns\n\nFull `file:`, `data:`, or `node:` URL (`string`) to the found thing\n\n###### Throws\n\nThrows an [`ErrnoException`][errnoexception].\n\n### `moduleResolve(specifier, parent, conditions, preserveSymlinks)`\n\nThe [“Resolver Algorithm Specification”][algo] as detailed in the Node docs\n(which is slightly lower-level than `resolve`).\n\n###### Parameters\n\n* `specifier` (`string`)\n  — `/example.js`, `./example.js`, `../example.js`, `some-package`, `fs`, etc\n* `parent` (`URL`, example: `import.meta.url`)\n  — full URL (to a file) that `specifier` is resolved relative from\n* `conditions` (`Set<string>`, default: `new Set(['node', 'import'])`)\n  — conditions\n* `preserveSymlinks` (`boolean`, default: `false`)\n  — keep symlinks instead of resolving them\n\n###### Returns\n\nA URL object (`URL`) to the found thing.\n\n###### Throws\n\nThrows an [`ErrnoException`][errnoexception].\n\n### `ErrnoException`\n\nOne of many different errors that occur when resolving (TypeScript type).\n\n###### Type\n\n```ts\ntype ErrnoExceptionFields = Error & {\n  errnode?: number | undefined\n  code?: string | undefined\n  path?: string | undefined\n  syscall?: string | undefined\n  url?: string | undefined\n}\n```\n\nThe `code` field on errors is one of the following strings:\n\n* `'ERR_INVALID_MODULE_SPECIFIER'`\n  — when `specifier` is invalid (example: `'#'`)\n* `'ERR_INVALID_PACKAGE_CONFIG'`\n  — when a `package.json` is invalid (example: invalid JSON)\n* `'ERR_INVALID_PACKAGE_TARGET'`\n  — when a `package.json` `exports` or `imports` is invalid (example: when it\n  does not start with `'./'`)\n* `'ERR_MODULE_NOT_FOUND'`\n  — when `specifier` cannot be found in `parent` (example: `'some-missing-package'`)\n* `'ERR_NETWORK_IMPORT_DISALLOWED'`\n  — thrown when trying to resolve a local file or builtin from a remote file\n  (`node:fs` relative to `'https://example.com'`)\n* `'ERR_PACKAGE_IMPORT_NOT_DEFINED'`\n  — when a local import is not defined in an import map (example: `'#local'`\n  when not defined)\n* `'ERR_PACKAGE_PATH_NOT_EXPORTED'`\n  — when an export is not defined in an export map (example: `'tape/index.js'`,\n  which is not in its export map)\n* `'ERR_UNSUPPORTED_DIR_IMPORT'`\n  — when attempting to import a directory (example: `'./lib/'`)\n* `'ERR_UNKNOWN_FILE_EXTENSION'`\n  — when somehow reading a file that has an unexpected extensions (`'./readme.md'`)\n* `'ERR_INVALID_ARG_VALUE'`\n  — when `conditions` is incorrect\n\n## Algorithm\n\nThe algorithm for `resolve` matches how Node handles `import.meta.resolve`, with\na couple of differences.\n\nThe algorithm for `moduleResolve` matches the [Resolver Algorithm\nSpecification][algo] as detailed in the Node docs (which is sync and slightly\nlower-level than `resolve`).\n\n## Differences to Node\n\n* `parent` defaulting to `import.meta.url` cannot be ponyfilled: you have to\n  explicitly pass it\n* no support for loaders (that would mean implementing all of loaders)\n* no support for CLI flags:\n  `--conditions`,\n  `--experimental-default-type`,\n  `--experimental-json-modules`,\n  `--experimental-network-imports`,\n  `--experimental-policy`,\n  `--experimental-wasm-modules`,\n  `--input-type`,\n  `--no-addons`,\n  `--preserve-symlinks`, nor\n  `--preserve-symlinks-main`\n  work\n* no support for `WATCH_REPORT_DEPENDENCIES` env variable\n* no attempt is made to add a suggestion based on how things used to work in\n  CJS before to not-found errors\n* prototypal methods are not guarded: Node protects for example `String#slice`\n  or so from being tampered with, whereas this doesn’t\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the additional type [`ErrnoException`][errnoexception].\n\n## Compatibility\n\nThis package is at least compatible with all maintained versions of Node.js.\nAs of now, that is Node.js 16 and later.\n\n## Contribute\n\nYes please!\nSee [How to Contribute to Open Source][contribute].\n\n## License\n\n[MIT][license] © [Titus Wormer][author] and Node.js contributors\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/wooorm/import-meta-resolve/workflows/main/badge.svg\n\n[build]: https://github.com/wooorm/import-meta-resolve/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/import-meta-resolve.svg\n\n[coverage]: https://codecov.io/github/wooorm/import-meta-resolve\n\n[downloads-badge]: https://img.shields.io/npm/dm/import-meta-resolve.svg\n\n[downloads]: https://www.npmjs.com/package/import-meta-resolve\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[typescript]: https://www.typescriptlang.org\n\n[contribute]: https://opensource.guide/how-to-contribute/\n\n[algo]: https://nodejs.org/dist/latest-v14.x/docs/api/esm.html#esm_resolver_algorithm\n\n[native-resolve]: https://nodejs.org/api/esm.html#esm_import_meta_resolve_specifier_parent\n\n[resolve]: #resolvespecifier-parent\n\n[moduleresolve]: #moduleResolvespecifier-parent-conditions-preserveSymlinks\n\n[errnoexception]: #errnoexception\n","readmeFilename":"readme.md"}